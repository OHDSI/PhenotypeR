[{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Codelist diagnostics","text":"example ’re going summarise characteristics individuals ankle sprain, ankle fracture, forearm fracture, hip fracture different measurements using Eunomia synthetic data. ’ll begin creating study cohorts.","code":"library(CDMConnector) library(CohortConstructor) library(CodelistGenerator) library(PhenotypeR) library(MeasurementDiagnostics) library(dplyr) library(ggplot2)  con <- DBI::dbConnect(duckdb::duckdb(),                        CDMConnector::eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- CDMConnector::cdmFromCon(con = con,                                  cdmName = \"Eunomia Synpuf\",                                 cdmSchema   = \"main\",                                 writeSchema = \"main\",                                  achillesSchema = \"main\")  cdm$injuries <- conceptCohort(cdm = cdm,   conceptSet = list(     \"ankle_sprain\" = 81151,     \"ankle_fracture\" = 4059173,     \"forearm_fracture\" = 4278672,     \"hip_fracture\" = 4230399,     \"measurements_cohort\" = c(40660437L, 2617206L, 4034850L,  2617239L, 4098179L)   ),   name = \"injuries\") cdm$injuries |>    glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v1.3.2 [unknown@Linux 6.11.0-1018-azure:R 4.5.1//tmp/RtmpKXEwzO/file2290796bdc56.duckdb] #> $ cohort_definition_id <int> 5, 5, 2, 5, 5, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5… #> $ subject_id           <int> 53, 923, 435, 638, 820, 80, 243, 342, 1187, 720, … #> $ cohort_start_date    <date> 2008-11-25, 2009-09-08, 2008-12-19, 2009-05-30, … #> $ cohort_end_date      <date> 2008-11-25, 2009-09-08, 2008-12-19, 2009-05-30, …"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"summarising-code-use","dir":"Articles","previous_headings":"","what":"Summarising code use","title":"Codelist diagnostics","text":"get good understanding codes ’ve used define cohorts can use codelistDiagnostics() function. Codelist diagnostics builds CodelistGenerator MeasurementDiagnostics R packages perform following analyses: Achilles code use: summarises counts codes database based achilles results using summariseAchillesCodeUse(). Orphan code use: Orphan codes refer codes include cohort definition, relationship codes codelist. , although many can false positives, may identify codes may want use cohort definitions. analysis uses summariseOrphanCodes(). Cohort code use: Summarises cohort code use cohort using summariseCohortCodeUse(). Measurement diagnostics: concepts used codelist measurement, summarises code use using summariseCohortMeasurementUse(). output function summarised result table.","code":"code_diag <- codelistDiagnostics(cdm$injuries)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"add-codelist-attribute","dir":"Articles","previous_headings":"Summarising code use","what":"Add codelist attribute","title":"Codelist diagnostics","text":"cohorts may created manually may codelists recorded cohort_codelist attribute. package utility function record codelist cohort_table object:","code":"cohortCodelist(cdm$injuries, cohortId = 1) #>  #> - ankle_fracture (1 codes) cdm$injuries <- cdm$injuries |>   addCodelistAttribute(codelist = list(new_codelist = c(1L, 2L)), cohortName = \"ankle_fracture\") cohortCodelist(cdm$injuries, cohortId = 1) #>  #> - new_codelist (2 codes)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"visualise-the-results","dir":"Articles","previous_headings":"","what":"Visualise the results","title":"Codelist diagnostics","text":"now use different functions visualise results generated CohortDiagnostics. Notice functions CodelistGenerator MeasurementDiagnostics R packages packages.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"achilles-code-use","dir":"Articles","previous_headings":"Visualise the results","what":"Achilles code use","title":"Codelist diagnostics","text":"","code":"tableAchillesCodeUse(code_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"orphan-code-use","dir":"Articles","previous_headings":"Visualise the results","what":"Orphan code use","title":"Codelist diagnostics","text":"","code":"tableOrphanCodes(code_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"cohort-code-use","dir":"Articles","previous_headings":"Visualise the results","what":"Cohort code use","title":"Codelist diagnostics","text":"","code":"tableCohortCodeUse(code_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"measurement-timings","dir":"Articles","previous_headings":"Visualise the results","what":"Measurement timings","title":"Codelist diagnostics","text":"","code":"tableMeasurementTimings(code_diag) plotMeasurementTimings(code_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"measurement-value-as-concept","dir":"Articles","previous_headings":"Visualise the results","what":"Measurement value as concept","title":"Codelist diagnostics","text":"","code":"tableMeasurementValueAsConcept(code_diag) plotMeasurementValueAsConcept(code_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CodelistDiagnostics.html","id":"measurement-value-as-numeric","dir":"Articles","previous_headings":"Visualise the results","what":"Measurement value as numeric","title":"Codelist diagnostics","text":"","code":"tableMeasurementValueAsNumeric(code_diag) plotMeasurementValueAsNumeric(code_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CohortDiagnostics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cohort diagnostics","text":"example ’re going summarise cohort diagnostics results cohorts individuals ankle sprain, ankle fracture, forearm fracture, hip fracture using Eunomia synthetic data. , ’ll begin creating study cohorts.","code":"library(CDMConnector) library(CohortConstructor) library(CodelistGenerator) library(CohortCharacteristics) library(CohortSurvival) library(PhenotypeR) library(dplyr) library(ggplot2)  con <- DBI::dbConnect(duckdb::duckdb(),                        CDMConnector::eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- CDMConnector::cdmFromCon(con = con,                                  cdmName = \"Eunomia Synpuf\",                                 cdmSchema   = \"main\",                                 writeSchema = \"main\",                                  achillesSchema = \"main\")  cdm$injuries <- conceptCohort(cdm = cdm,   conceptSet = list(     \"ankle_sprain\" = 81151,     \"ankle_fracture\" = 4059173,     \"forearm_fracture\" = 4278672,     \"hip_fracture\" = 4230399   ),   name = \"injuries\")"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CohortDiagnostics.html","id":"cohort-diagnostics","dir":"Articles","previous_headings":"","what":"Cohort diagnostics","title":"Cohort diagnostics","text":"can run cohort diagnostics analyses overall cohorts like : Cohort diagnostics builds CohortCharacteristics CohortSurvival R packages perform following analyses cohorts: Cohort count: Summarises number records persons one cohorts using summariseCohortCount(). Cohort attrition: Summarises attrition associated cohorts using summariseCohortAttrition(). Cohort characteristics: Summarises cohort baseline characteristics using summariseCharacteristics(). Results stratified sex age group (0 17, 18 64, 65 150). Age groups modified. Cohort large scale characteristics: Summarises cohort large scale characteristics using summariseLargeScaleCharacteristics(). Results stratified sex age group (0 17, 18 64, 65 150). Time windows (relative cohort entry) included : -Inf -1, -Inf -366, -365 -31, -30 -1, 0, 1 30, 31 365, 366 Inf, 1 Inf. analysis perform standard source code level. Cohort overlap: one cohort cohort table supplied, summarises overlap using summariseCohortOverlap(). Cohort timing: one cohort cohort table supplied, summarises timing using summariseCohortTiming(). Cohort survival: survival = TRUE, summarises survival event death (death table present cdm) usingestimateSingleEventSurvival(). analyses cohort characteristics, cohort age distribution, cohort large scale characteristics, cohort survival also performed (default) matched cohort. matched cohort created based year birth sex (see matchCohorts() function CohortConstructor package). can help us compare results cohorts obtain matched cohort, representing general population. Notice analysis performed : (1) original cohort, (2) individuals original cohorts match (named sampled cohort), (3) matched cohort. matched process can computationally expensive, specially cohorts big, can reduce matching analysis subset participants original cohort using matchedSample parameter. Alternatively, want create matched cohorts, can use matchedSample = 0. output cohortDiagnostics() summarised result table.","code":"cohort_diag <- cohortDiagnostics(cdm$injuries,                                   matchedSample = NULL,                                  survival = TRUE)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CohortDiagnostics.html","id":"visualise-cohort-diagnostics-results","dir":"Articles","previous_headings":"","what":"Visualise cohort diagnostics results","title":"Cohort diagnostics","text":"now use different functions visualise results generated CohortDiagnostics. Notice functions CohortCharacteristics CohortSurvival R packages packages. ### Cohort counts","code":"tableCohortCount(cohort_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CohortDiagnostics.html","id":"cohort-attrition","dir":"Articles","previous_headings":"Visualise cohort diagnostics results","what":"Cohort attrition","title":"Cohort diagnostics","text":"","code":"tableCohortAttrition(cohort_diag) plotCohortAttrition(cohort_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CohortDiagnostics.html","id":"cohort-characteristics","dir":"Articles","previous_headings":"Visualise cohort diagnostics results","what":"Cohort characteristics","title":"Cohort diagnostics","text":"","code":"tableCharacteristics(cohort_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/CohortDiagnostics.html","id":"cohort-large-scale-characteristics","dir":"Articles","previous_headings":"Visualise cohort diagnostics results","what":"Cohort large scale characteristics","title":"Cohort diagnostics","text":"","code":"tableLargeScaleCharacteristics(cohort_diag)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/DatabaseDiagnostics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Database diagnostics","text":"example ’re going using Eunomia synthetic data.","code":"library(CDMConnector) library(OmopSketch) library(PhenotypeR) library(dplyr) library(ggplot2)  con <- DBI::dbConnect(duckdb::duckdb(),                        CDMConnector::eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- CDMConnector::cdmFromCon(con = con,                                  cdmName = \"Eunomia Synpuf\",                                 cdmSchema   = \"main\",                                 writeSchema = \"main\",                                  achillesSchema = \"main\")"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/DatabaseDiagnostics.html","id":"database-diagnostics","dir":"Articles","previous_headings":"","what":"Database diagnostics","title":"Database diagnostics","text":"Although may created study cohort, inform analytic decisions interpretation results requires understanding dataset derived. databaseDiagnostics() function help us better understand data source. run database diagnostics just need provide cdm reference function. Database diagnostics builds OmopSketch package perform following analyses: Snapshot: Summarises meta data CDM object using summariseOmopSnapshot() Observation periods: Summarises observation period table using summariseObservationPeriod(). allow us see individuals multiple, non-overlapping, observation periods long observation period lasts average. output summarised result object.","code":"db_diagnostics <- databaseDiagnostics(cdm)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/DatabaseDiagnostics.html","id":"visualise-the-results","dir":"Articles","previous_headings":"","what":"Visualise the results","title":"Database diagnostics","text":"can use OmopSketch package functions visualise results obtained.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/articles/DatabaseDiagnostics.html","id":"snapshot","dir":"Articles","previous_headings":"Visualise the results","what":"Snapshot","title":"Database diagnostics","text":"","code":"tableOmopSnapshot(db_diagnostics)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/DatabaseDiagnostics.html","id":"observation-periods","dir":"Articles","previous_headings":"Visualise the results","what":"Observation periods","title":"Database diagnostics","text":"","code":"tableObservationPeriod(db_diagnostics)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeDiagnostics.html","id":"introduction-run-phenotypediagnostics","dir":"Articles","previous_headings":"","what":"Introduction: Run PhenotypeDiagnostics","title":"Phenotype diagnostics","text":"vignette, going present run PhenotypeDiagnostics(). going use following packages mock data: Note included achilles tables cdm reference, used speed analyses.","code":"library(CohortConstructor) library(PhenotypeR) library(dplyr)  con <- DBI::dbConnect(duckdb::duckdb(),                        CDMConnector::eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- CDMConnector::cdmFromCon(con = con,                                  cdmName = \"Eunomia Synpuf\",                                 cdmSchema   = \"main\",                                 writeSchema = \"main\",                                  achillesSchema = \"main\") cdm"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeDiagnostics.html","id":"create-a-cohort","dir":"Articles","previous_headings":"","what":"Create a cohort","title":"Phenotype diagnostics","text":"First, going use package CohortConstructor generate three cohorts warfarin, acetaminophen morphine users.","code":"# Create a codelist codes <- list(\"warfarin\" = c(1310149, 40163554),               \"acetaminophen\" = c(1125315, 1127078, 1127433, 40229134, 40231925, 40162522, 19133768),               \"morphine\" = c(1110410, 35605858, 40169988))  # Instantiate cohorts with CohortConstructor cdm$my_cohort <- conceptCohort(cdm = cdm,                                conceptSet = codes,                                 exit = \"event_end_date\",                                overlap = \"merge\",                                name = \"my_cohort\")"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeDiagnostics.html","id":"run-phenotypediagnostics","dir":"Articles","previous_headings":"","what":"Run PhenotypeDiagnostics","title":"Phenotype diagnostics","text":"Now proceed run phenotypeDiagnotics(). function run following analyses: Database diagnostics: includes information size data, time period covered, number people data, meta-data CDM object. See Database diagnostics vignette details. Codelist diagnostics: includes information concepts included cohorts’ codelist. See Codelist diagnostics vignette details. Cohort diagnostics: summarises characteristics cohorts, well comparing age sex matched controls database.. See Cohort diagnostics vignette details. Population diagnostics: Calculates frequency study cohorts database terms incidence rates prevalence. See Population diagnostics vignette details. can specify analysis want perform setting TRUE FALSE one corresponding arguments: Notice three additional arguments: populationSample: allows specify number people randomly extracted CDM perform Population diagnostics analysis. NULL, participants CDM included. helps reduce computational time. particularly useful outcomes interest relatively common, rarer may wish maximise statistical power calculate estimates dataset whole case set argument NULL. populationDateRange: can use specify time period want perform Population diagnostics analysis. matchedSample: Similar populationSample, arguments subsets random sample people cohort performs matched analysis sample. large cohorts can use save computational time. want create matched cohorts, can define matchedSample = 0.","code":"result <- phenotypeDiagnostics(   cohort = cdm$my_cohort,    diagnostics = c(\"databaseDiagnostics\", \"codelistDiagnostics\",                    \"cohortDiagnostics\", \"populationDiagnostics\"),   matchedSample = 1000   populationSample = 1e+06,   populationDateRange = as.Date(c(NA, NA))   ) result |> glimpse()"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeDiagnostics.html","id":"save-the-results","dir":"Articles","previous_headings":"","what":"Save the results","title":"Phenotype diagnostics","text":"save results, can use exportSummarisedResult function omopgenerics R Package:","code":"exportSummarisedResult(result, directory = here::here(), minCellCount = 5)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeDiagnostics.html","id":"visualisation-of-the-results","dir":"Articles","previous_headings":"","what":"Visualisation of the results","title":"Phenotype diagnostics","text":"get Phenotype diagnostics result, can use shinyDiagnostics easily create shiny app visualise results: Notice specified minimum number counts (minCellCount) suppression shown shiny app, also want shiny launched new R session (open). can see shiny app generated example .See Shiny diagnostics vignette full explanation shiny app.","code":"result <- shinyDiagnostics(result,                            directory = tempdir(),                            minCellCount = 5,                             open = TRUE)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeExpectations.html","id":"comparing-phenotype-diagnostic-results-against-phenotype-expectations","dir":"Articles","previous_headings":"","what":"Comparing phenotype diagnostic results against phenotype expectations","title":"Phenotype expectations","text":"use PhenotypeR help assess research readiness set study cohorts. help make assessments can help explicit set expectations compare results. example, age study cohort similar expected? proportion cohort male vs female similar expected based know phenotype interest?","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeExpectations.html","id":"creating-phenotype-expectations","dir":"Articles","previous_headings":"Comparing phenotype diagnostic results against phenotype expectations","what":"Creating phenotype expectations","title":"Phenotype expectations","text":"can define set expectations expect see phenotype diagnostic results. can visualise easily using tableCohortExpectations() function, create tibble following columns: cohort_name (know expectation corresponds cohort), estimate (estimate expectation associated ), value (expectation value see results). example, say one cohort called “knee_osteoarthritis” another called “knee_replacement”. create expectations median age proportion male cohort like . Now structured expectations, can quickly create summary (’ll see next vignette can also include shiny app). Note long make sure include four required columns can create set expectations relevant cohorts.","code":"library(dplyr) library(PhenotypeR)  knee_oa <- tibble(cohort_name = \"knee_osteoarthritis\",                   estimate = c(\"Median age\", \"Proportion male\"),                   value = c(\"60 to 65\", \"45%\"),                   source = \"Clinician\") knee_replacement <- tibble(cohort_name = \"knee_replacement\",                            estimate = c(\"Median age\", \"Proportion male\"),                            value = c(\"65 to 70\", \"50%\"),                            source = \"Clinician\")  expectations <- bind_rows(knee_oa, knee_replacement) tableCohortExpectations(expectations) tibble(cohort_name = \"knee_osteoarthritis\",                   estimate = c(\"Commonly seen subsequent procedures\"),                   value = c(\"Knee replacement\"),                   source = \"Expert opinion\") |>    tableCohortExpectations()"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PhenotypeExpectations.html","id":"using-an-llm-to-draft-your-phenotype-expectations","dir":"Articles","previous_headings":"Comparing phenotype diagnostic results against phenotype expectations","what":"Using an LLM to draft your phenotype expectations","title":"Phenotype expectations","text":"custom expectations created might based (friendly colleagues’) clinical knowledge. though requires access requisite clinical knowledge often time-consuming, especially many cohorts start considering many different estimates phenotype diagnostics. speed process can use LLM help us draft expectations. use create custom set. example ’ll use Google Gemini populate expectations. Notice may need first create Gemini API run example. can following link: https://aistudio.google.com/app/apikey. add API R environment: help us create consistent set phenotype expectations LLMs, PhenotypeR provides getCohortExpectations(). function generate set expectations associated various cohort diagnostic function results. Instead passing cohort names, instead pass results set phenotypeDiagnostics() instead. case ’ll automatically get expectations study cohorts results. Instead Google Gemini use Mistral instead. important note importance descriptive cohort name. names passed LLM informative name, better can expect LLM generating expectations. general make amenable LLM workflow naming cohorts : avoid abbreviations misinterpreted indicate type cohort (e.g. “incident_diagnosis_of_knee_osteoarthritis”, “routine_measurement_of_creatine”, “new_user_of_paracetamol”) include key eligibility criteria (e.g. “new_user_of_paracetamol_under_age_21”) also go without saying treat output LLM unequivocal truth. LLM expectations may well prove useful starting point, clinical judgement knowledge data source hand still vital appropriately interpreting results. typical workflow may well using LLMs help generate phenotype expectations review clinical expert save time ensuring appropriate set compare results .","code":"usethis::edit_r_environ()  # Add your API in your R environment: GEMINI_API_KEY = \"your API\"  # Restrart R library(ellmer)  chat <- chat(\"google_gemini\") llm_expectation <- chat$chat(     interpolate(\"What are the typical characteristics we can expect to see in our real-world data for a cohort of people with an ankle sprain (average age, proportion male vs female, subsequent medications, etc)? Be brief and provide summar with a few sentences.\"))   tibble(cohort_name = \"diagnosis_of_ankle_sprain\",        estimate = \"General summary\",        value = llm_expectation,        source = \"llm\") |>    tableCohortExpectations() getCohortExpectations(chat = chat,                        phenotypes = c(\"diagnosis_of_ankle_sprain\",                                       \"diagnosis_of_prostate_cancer\",                                       \"new_user_of_morphine\")) |>    tableCohortExpectations() library(DBI) library(duckdb) library(CDMConnector) library(CohortConstructor)  con <- dbConnect(duckdb(), dbdir = eunomiaDir()) cdm <- cdmFromCon(     con = con, cdmSchema = \"main\", writeSchema = \"main\", cdmName = \"Eunomia\"   )  codes <- list(\"diagnosis_of_ankle_sprain\" = 81151,               \"diagnosis_of_prostate_cancer\" = 4163261,               \"new_user_of_morphine\" = c(1110410L, 35605858L, 40169988L))  cdm$my_cohort <- conceptCohort(cdm = cdm,                                  conceptSet = codes,                                  exit = \"event_end_date\",                                  name = \"my_cohort\")  diag_results <- phenotypeDiagnostics(cdm$my_cohort)  getCohortExpectations(chat = chat,                        phenotypes = diag_results) |>    tableCohortExpectations() chat <- ellmer::chat(\"mistral\") diag_results <- phenotypeDiagnostics(cdm$my_cohort) getCohortExpectations(chat = chat,                        phenotypes = diag_results) |>    tableCohortExpectations()"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PopulationDiagnostics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Population diagnostics","text":"example ’re going just create cohort individuals ankle sprain using Eunomia synthetic data. can get incidence prevalence study cohort using populationDiagnostics(): function builds IncidencePrevalence R package perform following analyses: Incidence: estimates incidence cohort using estimateIncidence(). Prevalence: estimates prevalence cohort year basis using estimatePeriodPrevalence(). analyses performed : Overall stratified age groups: 0 17, 18 64, 65 150. Age groups modified. Overall stratified sex (Female, Male). Restricting denominator population 0 365 days prior observation.","code":"library(CDMConnector) library(CohortConstructor) library(CodelistGenerator) library(PatientProfiles) library(IncidencePrevalence) library(PhenotypeR)   con <- DBI::dbConnect(duckdb::duckdb(),                        CDMConnector::eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- CDMConnector::cdmFromCon(con = con,                                  cdmName = \"Eunomia Synpuf\",                                 cdmSchema   = \"main\",                                 writeSchema = \"main\",                                  achillesSchema = \"main\")  cdm$injuries <- conceptCohort(cdm = cdm,   conceptSet = list(     \"ankle_sprain\" = 81151   ),   name = \"injuries\") pop_diag <- populationDiagnostics(cdm$injuries)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PopulationDiagnostics.html","id":"visualising-the-results","dir":"Articles","previous_headings":"","what":"Visualising the results","title":"Population diagnostics","text":"can use IncidencePrevalence package visualise results obtained.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PopulationDiagnostics.html","id":"incidence","dir":"Articles","previous_headings":"Visualising the results","what":"Incidence","title":"Population diagnostics","text":"","code":"tableIncidence(pop_diag,                     groupColumn = c(\"cdm_name\", \"outcome_cohort_name\"),                hide = \"denominator_cohort_name\",                settingsColumn = c(\"denominator_age_group\",                          \"denominator_sex\",                          \"denominator_days_prior_observation\",                          \"outcome_cohort_name\")) results <- pop_diag |>    omopgenerics::filterSettings(result_type == \"incidence\") |>   visOmopResults::filterAdditional(analysis_interval == \"years\") plotIncidence(results,               colour = \"denominator_age_group\",               facet = c(\"denominator_sex\", \"denominator_days_prior_observation\"))"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/PopulationDiagnostics.html","id":"prevalence","dir":"Articles","previous_headings":"Visualising the results","what":"Prevalence","title":"Population diagnostics","text":"","code":"tablePrevalence(pop_diag,                     groupColumn = c(\"cdm_name\", \"outcome_cohort_name\"),                hide = \"denominator_cohort_name\",                settingsColumn = c(\"denominator_age_group\",                          \"denominator_sex\",                          \"denominator_days_prior_observation\",                          \"outcome_cohort_name\")) results <- pop_diag |>    omopgenerics::filterSettings(result_type == \"prevalence\") |>   visOmopResults::filterAdditional(analysis_interval == \"years\") plotPrevalence(results,                colour = \"denominator_age_group\",                facet = c(\"denominator_sex\", \"denominator_days_prior_observation\"))"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/ShinyDiagnostics.html","id":"introduction-run-shinydiagnostics","dir":"Articles","previous_headings":"","what":"Introduction: Run ShinyDiagnostics","title":"Shiny diagnostics","text":"previous vignettes seen run phenotype diagnostics ’s expectations. ShinyDiagnostics can help us visualise results interactive shiny app. See example run :","code":"library(CohortConstructor) library(PhenotypeR) library(dplyr)  con <- DBI::dbConnect(duckdb::duckdb(),                        CDMConnector::eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- CDMConnector::cdmFromCon(con = con,                                  cdmName = \"Eunomia Synpuf\",                                 cdmSchema   = \"main\",                                 writeSchema = \"main\",                                  achillesSchema = \"main\")  # Create a code lists codes <- list(\"user_of_warfarin\" = c(1310149L, 40163554L),               \"user_of_acetaminophen\" = c(1125315L, 1127078L, 1127433L, 40229134L,                                            40231925L, 40162522L, 19133768L),               \"user_of_morphine\" = c(1110410L, 35605858L, 40169988L),               \"measurements_cohort\" = c(40660437L, 2617206L, 4034850L,  2617239L,                                          4098179L))  # Instantiate cohorts with CohortConstructor cdm$my_cohort <- conceptCohort(cdm = cdm,                                conceptSet = codes,                                 exit = \"event_end_date\",                                overlap = \"merge\",                                name = \"my_cohort\")  # Run PhenotypeDiagnostics including all diagnostics result <- phenotypeDiagnostics(cdm$my_cohort, survival = TRUE)  # Generate expectations chat <- chat(\"google_gemini\")  expectations <- getCohortExpectations(chat = chat,                        phenotypes = result)  # Create the shiny app based on PhenotypeDiagnostics results, suppressing all  # cell counts smaller than 2, saved in a temporary directory, and with the  # expectations created using \"gemini\". shinyDiagnostics(result = result, minCellCount = 2, directory = tempdir(), expectations = expectations)"},{"path":"https://ohdsi.github.io/PhenotypeR/articles/ShinyDiagnostics.html","id":"shiny-app-overview","dir":"Articles","previous_headings":"","what":"Shiny App Overview","title":"Shiny diagnostics","text":"Let’s now explore Shiny App created together! Please, find . first thing find creating PhenotypeR Shiny Diagnostics Background tab small summary diagnostics:  can see PhenotypeR version used generate Shiny App clicking tab top.  download summarised result clicking download tab:  Notice tab one diagnostics, contain specific analyses performed. Results visualised form interactive tables plots. Database Diagnostics:  Codelist Diagnostics:  Cohort Diagnostics:  Population Diagnostics:  Let’s now explore additional functionalities ShinyDiagnostics offers. click Codelist diagnostics / Achilles code use Codelist diagnostics / Orphan code use tab, first find horizontal purple bar show us databases included:  selected ones interest, need click UPDATE button generate table results. Codelist diagnostics / cohort code use, *Codelist diagnostics / measurement diagnostics, Cohort diagnostics Population diagnostics**, also option select cohorts interest:  always find (tabs) download icon right download table, gt table, plot shown:  tabs, also find left tab show additional filtering formatting options (remember click UPDATE every time change parameter!):  two () subtabs different formatting formats (case Population diagnositcs / Incidence, table plot), formatting tab right:  Now ’s turn explore Shiny App!","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/articles/ShinyDiagnostics.html","id":"special-cases","dir":"Articles","previous_headings":"","what":"Special cases","title":"Shiny diagnostics","text":"mentioned, ShinyDiagnostics() can run specific diagnostic results. includes DatabaseDiagnostics(), CodelistDiagnostics(), CohortDiagnostics(), PopulationDiagnostics(). Alternatively, can disable diagnostics within PhenotypeDiagnostics(). diagnostic performed, corresponding tab appear Shiny App. Similarly, survival analysis skipped CohortDiagnostics(), tab removed. applies CDM lacks ACHILLES tables, means “achilles code use” “orphan code use” performed. cases, tabs also automatically removed Shiny App.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer. Marti Catala. Author. Xihang Chen. Author. Marta Alcalde-Herraiz. Author. Nuria Mercade-Besora. Author. Albert Prats-Uribe. Author.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E, Catala M, Chen X, Alcalde-Herraiz M, Mercade-Besora N, Prats-Uribe (2025). PhenotypeR: Assess Study Cohorts Using Common Data Model. R package version 0.1.6, https://ohdsi.github.io/PhenotypeR/.","code":"@Manual{,   title = {PhenotypeR: Assess Study Cohorts Using a Common Data Model},   author = {Edward Burn and Marti Catala and Xihang Chen and Marta Alcalde-Herraiz and Nuria Mercade-Besora and Albert Prats-Uribe},   year = {2025},   note = {R package version 0.1.6},   url = {https://ohdsi.github.io/PhenotypeR/}, }"},{"path":"https://ohdsi.github.io/PhenotypeR/index.html","id":"phenotyper-","dir":"","previous_headings":"","what":"Assess Study Cohorts Using a Common Data Model","title":"Assess Study Cohorts Using a Common Data Model","text":"PhenotypeR package helps us assess research-readiness set cohorts defined. assessment includes: Database diagnostics help us better understand database created. includes information size data, time period covered, number people data whole. granular information may influence analytic decisions, number observation periods per person, also described. Codelist diagnostics help answer questions like concepts codelist used database? concepts present led individuals’ entry cohort? concepts used database didn’t include codelist maybe ? Cohort diagnostics help answer questions like many individuals include cohort many excluded inclusion criteria? multiple cohorts, overlap people enter one cohort relative another? incidence cohort entry prevalence cohort database? can also compare study cohorts general population matching people similar age sex. Population diagnostics estimates frequency study cohorts database terms incidence rates prevalence.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Assess Study Cohorts Using a Common Data Model","text":"can install PhenotypeR CRAN: can install development version GitHub:","code":"install.packages(\"PhenotypeR\") # install.packages(\"remotes\") remotes::install_github(\"OHDSI/PhenotypeR\")"},{"path":"https://ohdsi.github.io/PhenotypeR/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Assess Study Cohorts Using a Common Data Model","text":"illustrate functionality PhenotypeR, let’s create cohort using Eunomia Synpuf dataset. ’ll first load required packages create cdm reference data. Note ’ve included achilles results cdm reference. can ’ll use precomputed counts speed analysis. can easily run analyses explained (database diagnostics, codelist diagnostics, cohort diagnostics, population diagnostics) using phenotypeDiagnostics(): can also create table expected results, can compare later actual results. alternatively, can use AI generate expectations results can quickly view interactive application. ’ll apply minimum cell count 10 results save shiny app temporary directory. See shiny app generated example cohort .","code":"library(dplyr) library(CohortConstructor) library(PhenotypeR) library(CodelistGenerator) library(duckdb) library(CDMConnector) library(DBI) # Connect to the database and create the cdm object con <- dbConnect(duckdb(), dbdir = eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- CDMConnector::cdmFromCon(con = con,                                  cdmName = \"Eunomia Synpuf\",                                 cdmSchema   = \"main\",                                 writeSchema = \"main\",                                 achillesSchema = \"main\") cdm #>  #> ── # OMOP CDM reference (duckdb) of Eunomia Synpuf ───────────────────────────── #> • omop tables: person, observation_period, visit_occurrence, visit_detail, #> condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, #> measurement, observation, death, note, note_nlp, specimen, fact_relationship, #> location, care_site, provider, payer_plan_period, cost, drug_era, dose_era, #> condition_era, metadata, cdm_source, concept, vocabulary, domain, #> concept_class, concept_relationship, relationship, concept_synonym, #> concept_ancestor, source_to_concept_map, drug_strength, cohort_definition, #> attribute_definition #> • cohort tables: - #> • achilles tables: achilles_analysis, achilles_results, achilles_results_dist #> • other tables: - # Create a code lists codes <- list(\"warfarin\" = c(1310149L, 40163554L),               \"acetaminophen\" = c(1125315L, 1127078L, 1127433L, 40229134L, 40231925L, 40162522L, 19133768L),               \"morphine\" = c(1110410L, 35605858L, 40169988L),               \"measurements_cohort\" = c(40660437L, 2617206L, 4034850L,  2617239L, 4098179L))  # Instantiate cohorts with CohortConstructor cdm$my_cohort <- conceptCohort(cdm = cdm,                                conceptSet = codes,                                 exit = \"event_end_date\",                                overlap = \"merge\",                                name = \"my_cohort\") result <- phenotypeDiagnostics(cdm$my_cohort, survival = TRUE) expectations <- tibble(   \"cohort_name\" = c(\"warfarin\", \"acetaminophen\", \"morphine\", \"measurements_cohort\"),   \"estimate\" = c(\"Male percentage\", \"Survival probability after 5y\", \"Median age\", \"Median age\"),   \"value\" = c(\"56%\", \"96%\", \"57-58\", \"42-45\"),   \"source\" = c(\"A clinician\", \"A clinician\", \"A clinician\", \"A clinician\"),   \"diagnostic\" = c(\"cohort_characteristics\", \"cohort_survival\", \"cohort_characteristics\", \"cohort_characteristics\")  ) library(ellmer) # Notice that you may need to generate an google gemini API with https://aistudio.google.com/app/apikey and add it to your R environment: # usethis::edit_r_environ() # GEMINI_API_KEY = \"your API\"  chat <- chat(\"google_gemini\")  expectations <- getCohortExpectations(chat = chat,                        phenotypes = result) shinyDiagnostics(result = result, minCellCount = 2, directory = tempdir(), expectations = expectations)"},{"path":"https://ohdsi.github.io/PhenotypeR/index.html","id":"more-information","dir":"","previous_headings":"Example usage","what":"More information","title":"Assess Study Cohorts Using a Common Data Model","text":"see details regarding one analyses, please refer package vignettes.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/PhenotypeR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PhenotypeR: Assess Study Cohorts Using a Common Data Model — PhenotypeR-package","title":"PhenotypeR: Assess Study Cohorts Using a Common Data Model — PhenotypeR-package","text":"Phenotype study cohorts data mapped Observational Medical Outcomes Partnership Common Data Model. Diagnostics run database, code list, cohort, population level assess whether study cohorts ready research.","code":""},{"path":[]},{"path":"https://ohdsi.github.io/PhenotypeR/reference/PhenotypeR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PhenotypeR: Assess Study Cohorts Using a Common Data Model — PhenotypeR-package","text":"Maintainer: Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) Authors: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID) Xihang Chen xihang.chen@ndorms.ox.ac.uk (ORCID) Marta Alcalde-Herraiz marta.alcaldeherraiz@ndorms.ox.ac.uk (ORCID) Nuria Mercade-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) Albert Prats-Uribe albert.prats-uribe@ndorms.ox.ac.uk (ORCID)","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/addCodelistAttribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds the cohort_codelist attribute to a cohort — addCodelistAttribute","title":"Adds the cohort_codelist attribute to a cohort — addCodelistAttribute","text":"`addCodelistAttribute()` allows users add codelist cohort OMOP CDM. particularly important use `codelistDiagnostics()`, underlying assumption cohort fed `codelistDiagnostics()` cohort_codelist attribute attached .","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/addCodelistAttribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds the cohort_codelist attribute to a cohort — addCodelistAttribute","text":"","code":"addCodelistAttribute(cohort, codelist, cohortName = names(codelist))"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/addCodelistAttribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds the cohort_codelist attribute to a cohort — addCodelistAttribute","text":"cohort Cohort table cdm reference codelist Named list concepts cohortName element codelist, name cohort `cohort` codelist refers","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/addCodelistAttribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds the cohort_codelist attribute to a cohort — addCodelistAttribute","text":"cohort","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/addCodelistAttribute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds the cohort_codelist attribute to a cohort — addCodelistAttribute","text":"","code":"# \\donttest{ library(PhenotypeR)  cdm <- mockPhenotypeR()  cohort <- addCodelistAttribute(cohort = cdm$my_cohort, codelist = list(\"cohort_1\" = 1L)) attr(cohort, \"cohort_codelist\") #> # Source:   table<my_cohort_codelist> [?? x 4] #> # Database: DuckDB v1.3.2 [unknown@Linux 6.11.0-1018-azure:R 4.5.1/:memory:] #>   cohort_definition_id codelist_name concept_id codelist_type #>                  <int> <chr>              <int> <chr>         #> 1                    1 cohort_1               1 index event    CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/codelistDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Run codelist-level diagnostics — codelistDiagnostics","title":"Run codelist-level diagnostics — codelistDiagnostics","text":"`codelistDiagnostics()` runs phenotypeR diagnostics cohort_codelist attribute cohort. Thus codelist attribute cohort must populated. missing populated using `addCodelistAttribute()` function. Furthermore `codelistDiagnostics()` requires achilles tables present cdm concept counts derived.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/codelistDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run codelist-level diagnostics — codelistDiagnostics","text":"","code":"codelistDiagnostics(cohort)"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/codelistDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run codelist-level diagnostics — codelistDiagnostics","text":"cohort cohort table cdm reference. cohort_codelist attribute must populated. cdm reference must contain achilles tables used deriving concept counts.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/codelistDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run codelist-level diagnostics — codelistDiagnostics","text":"summarised result","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/codelistDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run codelist-level diagnostics — codelistDiagnostics","text":"","code":"# \\donttest{ library(CohortConstructor) library(PhenotypeR)  cdm <- mockPhenotypeR()  cdm$arthropathies <- conceptCohort(cdm,                                    conceptSet = list(\"arthropathies\" = c(37110496)),                                    name = \"arthropathies\") #> Warning: ! `codelist` casted to integers. #> ℹ Subsetting table condition_occurrence using 1 concept with domain: condition. #> ℹ Combining tables. #> ℹ Creating cohort attributes. #> ℹ Applying cohort requirements. #> ℹ Merging overlapping records. #> ✔ Cohort arthropathies created.  result <- codelistDiagnostics(cdm$arthropathies) #> • Getting codelists from cohorts #> • Getting index event breakdown #> Getting counts of arthropathies codes for cohort arthropathies #> • Getting code counts in database based on achilles #>  #> • Getting orphan concepts #> PHOEBE results not available #> ℹ The concept_recommended table is not present in the cdm. #> Getting orphan codes for arthropathies #>   CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/cohortDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Run cohort-level diagnostics — cohortDiagnostics","title":"Run cohort-level diagnostics — cohortDiagnostics","text":"Runs phenotypeR diagnostics cohort. diganostics include: * Age groups sex summarised. * summary visits everyone cohort using visit_occurrence table. * summary age sex density cohort. * Attritions cohorts. * Overlap cohorts (one cohort used).","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/cohortDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run cohort-level diagnostics — cohortDiagnostics","text":"","code":"cohortDiagnostics(cohort, survival = FALSE, matchedSample = 1000)"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/cohortDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run cohort-level diagnostics — cohortDiagnostics","text":"cohort Cohort table cdm reference survival Boolean variable. Whether conduct survival analysis (TRUE) (FALSE). matchedSample number people take random sample matching. `matchedSample = NULL`, sampling performed. `matchedSample = 0`, matched cohorts created.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/cohortDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run cohort-level diagnostics — cohortDiagnostics","text":"summarised result","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/cohortDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run cohort-level diagnostics — cohortDiagnostics","text":"","code":"# \\donttest{ library(PhenotypeR)  cdm <- mockPhenotypeR()  result <- cohortDiagnostics(cdm$my_cohort) #> • Starting Cohort Diagnostics #> → Getting cohort attrition #> → Getting cohort count #> ℹ summarising data #> ℹ summarising cohort cohort_1 #> ℹ summarising cohort cohort_2 #> ✔ summariseCharacteristics finished! #> → Getting cohort overlap #> → Getting cohort timing #> ℹ The following estimates will be computed: #> • days_between_cohort_entries: median, q25, q75, min, max, density #> ! Table is collected to memory as not all requested estimates are supported on #>   the database side #> → Start summary of data, at 2025-07-30 18:52:13.15484 #> ✔ Summary finished, at 2025-07-30 18:52:13.282765 #> → Creating matching cohorts #> → Sampling cohort `my_cohort` #> Returning entry cohort as the size of the cohorts to be sampled is equal or #> smaller than `n`. #> • Generating an age and sex matched cohort for cohort_1 #> Starting matching #> ℹ Creating copy of target cohort. #> • 1 cohort to be matched. #> ℹ Creating controls cohorts. #> ℹ Excluding cases from controls #> • Matching by gender_concept_id and year_of_birth #> • Removing controls that were not in observation at index date #> • Excluding target records whose pair is not in observation #> • Adjusting ratio #> Binding cohorts #> ✔ Done #> → Sampling cohort `my_cohort` #> Returning entry cohort as the size of the cohorts to be sampled is equal or #> smaller than `n`. #> • Generating an age and sex matched cohort for cohort_2 #> Starting matching #> ℹ Creating copy of target cohort. #> • 1 cohort to be matched. #> ℹ Creating controls cohorts. #> ℹ Excluding cases from controls #> • Matching by gender_concept_id and year_of_birth #> • Removing controls that were not in observation at index date #> • Excluding target records whose pair is not in observation #> • Adjusting ratio #> Binding cohorts #> ✔ Done #> → Getting cohorts and indexes #> → Summarising cohort characteristics #> ℹ adding demographics columns #> ℹ adding tableIntersectCount 1/1 #> window names casted to snake_case: #> • `-365 to -1` -> `365_to_1` #> ℹ summarising data #> ℹ summarising cohort cohort_1 #> ℹ summarising cohort cohort_2 #> ℹ summarising cohort cohort_1_sampled #> ℹ summarising cohort cohort_1_matched #> ℹ summarising cohort cohort_2_sampled #> ℹ summarising cohort cohort_2_matched #> ✔ summariseCharacteristics finished! #> → Calculating age density #> ℹ The following estimates will be computed: #> • age: density #> → Start summary of data, at 2025-07-30 18:52:37.875341 #> ✔ Summary finished, at 2025-07-30 18:52:38.205534 #> → Run large scale characteristics (including source and standard codes) #> ℹ Summarising large scale characteristics  #>  - getting characteristics from table condition_occurrence (1 of 6) #>  - getting characteristics from table visit_occurrence (2 of 6) #>  - getting characteristics from table measurement (3 of 6) #>  - getting characteristics from table procedure_occurrence (4 of 6) #>  - getting characteristics from table observation (5 of 6) #>  - getting characteristics from table drug_exposure (6 of 6) #> Formatting result #> ✔ Summarising large scale characteristics #> → Run large scale characteristics (including only standard codes) #> ℹ Summarising large scale characteristics  #>  - getting characteristics from table condition_occurrence (1 of 6) #>  - getting characteristics from table visit_occurrence (2 of 6) #>  - getting characteristics from table measurement (3 of 6) #>  - getting characteristics from table procedure_occurrence (4 of 6) #>  - getting characteristics from table observation (5 of 6) #>  - getting characteristics from table drug_exposure (6 of 6) #> Formatting result #> ✔ Summarising large scale characteristics #> `matchedSample` casted to character.  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/cohortDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of `cohort`. — cohortDoc","title":"Helper for consistent documentation of `cohort`. — cohortDoc","text":"Helper consistent documentation `cohort`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/cohortDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of `cohort`. — cohortDoc","text":"cohort Cohort table cdm reference","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/databaseDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Database diagnostics — databaseDiagnostics","title":"Database diagnostics — databaseDiagnostics","text":"phenotypeR diagnostics cdm object. Diagnostics include: * Summarise cdm_reference object, creating snapshot metadata cdm_reference object. * Summarise observation period table getting overall statistics summarised_result object.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/databaseDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database diagnostics — databaseDiagnostics","text":"","code":"databaseDiagnostics(cdm)"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/databaseDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database diagnostics — databaseDiagnostics","text":"cdm CDM reference","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/databaseDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Database diagnostics — databaseDiagnostics","text":"summarised result","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/databaseDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Database diagnostics — databaseDiagnostics","text":"","code":"# \\donttest{ library(PhenotypeR)  cdm <- mockPhenotypeR()  result <- databaseDiagnostics(cdm) #> Warning: Vocabulary version in cdm_source (NA) doesn't match the one in the vocabulary #> table (mock)  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/directoryDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of `directory`. — directoryDoc","title":"Helper for consistent documentation of `directory`. — directoryDoc","text":"Helper consistent documentation `directory`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/directoryDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of `directory`. — directoryDoc","text":"directory Directory save report","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/expectationsDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of `expectations`. — expectationsDoc","title":"Helper for consistent documentation of `expectations`. — expectationsDoc","text":"Helper consistent documentation `expectations`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/expectationsDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of `expectations`. — expectationsDoc","text":"expectations Data frame tibble cohort expectations. must contain following columns: cohort_name, estimate, value, source.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/getCohortExpectations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort expectations using an LLM — getCohortExpectations","title":"Get cohort expectations using an LLM — getCohortExpectations","text":"Get cohort expectations using LLM","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/getCohortExpectations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort expectations using an LLM — getCohortExpectations","text":"","code":"getCohortExpectations(chat, phenotypes)"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/getCohortExpectations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort expectations using an LLM — getCohortExpectations","text":"chat ellmer chat phenotypes Either vector phenotype names results PhenotypeR.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/getCohortExpectations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort expectations using an LLM — getCohortExpectations","text":"tibble expectations cohort.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/matchedDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of `matched`. — matchedDoc","title":"Helper for consistent documentation of `matched`. — matchedDoc","text":"Helper consistent documentation `matched`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/matchedDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of `matched`. — matchedDoc","text":"matchedSample number people take random sample matching. `matchedSample = NULL`, sampling performed. `matchedSample = 0`, matched cohorts created.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/mockPhenotypeR.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a mock cdm reference for mockPhenotypeR — mockPhenotypeR","title":"Function to create a mock cdm reference for mockPhenotypeR — mockPhenotypeR","text":"`mockPhenotypeR()` creates example dataset can used show package works","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/mockPhenotypeR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a mock cdm reference for mockPhenotypeR — mockPhenotypeR","text":"","code":"mockPhenotypeR(   nPerson = 100,   con = DBI::dbConnect(duckdb::duckdb()),   writeSchema = \"main\",   seed = 111 )"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/mockPhenotypeR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a mock cdm reference for mockPhenotypeR — mockPhenotypeR","text":"nPerson number people cdm. con DBI connection create cdm mock object. writeSchema Name schema connection writing permissions. seed seed use creating mock data.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/mockPhenotypeR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a mock cdm reference for mockPhenotypeR — mockPhenotypeR","text":"cdm object","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/mockPhenotypeR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a mock cdm reference for mockPhenotypeR — mockPhenotypeR","text":"","code":"# \\donttest{ library(PhenotypeR)  cdm <- mockPhenotypeR()  cdm #>  #> ── # OMOP CDM reference (duckdb) of mock database ────────────────────────────── #> • omop tables: cdm_source, concept, concept_ancestor, concept_relationship, #> concept_synonym, condition_occurrence, death, device_exposure, drug_exposure, #> drug_strength, measurement, observation, observation_period, person, #> procedure_occurrence, visit_occurrence, vocabulary #> • cohort tables: my_cohort #> • achilles tables: achilles_analysis, achilles_results, achilles_results_dist #> • other tables: - # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/phenotypeDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Phenotype a cohort — phenotypeDiagnostics","title":"Phenotype a cohort — phenotypeDiagnostics","text":"comprises diagnostics offered package, includes: * diagnostics database via `databaseDiagnostics`. * diagnostics cohort_codelist attribute cohort via `codelistDiagnostics`. * diagnostics cohort via `cohortDiagnostics`. * diagnostics population via `populationDiagnostics`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/phenotypeDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phenotype a cohort — phenotypeDiagnostics","text":"","code":"phenotypeDiagnostics(   cohort,   diagnostics = c(\"databaseDiagnostics\", \"codelistDiagnostics\", \"cohortDiagnostics\",     \"populationDiagnostics\"),   survival = FALSE,   matchedSample = 1000,   populationSample = 1e+06,   populationDateRange = as.Date(c(NA, NA)) )"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/phenotypeDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phenotype a cohort — phenotypeDiagnostics","text":"cohort Cohort table cdm reference diagnostics Vector indicating diagnostics perform. Options include: `databaseDiagnostics`, `codelistDiagnostics`, `cohortDiagnostics`, `populationDiagnostics`. survival Boolean variable. Whether conduct survival analysis (TRUE) (FALSE). matchedSample number people take random sample matching. `matchedSample = NULL`, sampling performed. `matchedSample = 0`, matched cohorts created. populationSample Number people cdm sample. NULL sampling performed. Sample within populationDateRange specified. populationDateRange Two dates. first indicating earliest cohort start date second indicating latest possible cohort end date. NULL first date set missing, earliest observation_start_date observation_period table used former.  NULL second date set missing, latest observation_end_date observation_period table used latter.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/phenotypeDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phenotype a cohort — phenotypeDiagnostics","text":"summarised result","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/phenotypeDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phenotype a cohort — phenotypeDiagnostics","text":"","code":"# \\donttest{ library(PhenotypeR)  cdm <- mockPhenotypeR()  result <- phenotypeDiagnostics(cdm$my_cohort) #>  #> Warning: Vocabulary version in cdm_source (NA) doesn't match the one in the vocabulary #> table (mock) #>  #> Warning: ! cohort_codelist attribute for cohort is empty #> ℹ Returning an empty summarised result #> ℹ You can add a codelist to a cohort with `addCodelistAttribute()`. #>  #> • Starting Cohort Diagnostics #> → Getting cohort attrition #> → Getting cohort count #> ℹ summarising data #> ℹ summarising cohort cohort_1 #> ℹ summarising cohort cohort_2 #> ✔ summariseCharacteristics finished! #> → Getting cohort overlap #> → Getting cohort timing #> ℹ The following estimates will be computed: #> • days_between_cohort_entries: median, q25, q75, min, max, density #> ! Table is collected to memory as not all requested estimates are supported on #>   the database side #> → Start summary of data, at 2025-07-30 18:55:06.736838 #> ✔ Summary finished, at 2025-07-30 18:55:06.855889 #> → Creating matching cohorts #> → Sampling cohort `my_cohort` #> Returning entry cohort as the size of the cohorts to be sampled is equal or #> smaller than `n`. #> • Generating an age and sex matched cohort for cohort_1 #> Starting matching #> ℹ Creating copy of target cohort. #> • 1 cohort to be matched. #> ℹ Creating controls cohorts. #> ℹ Excluding cases from controls #> • Matching by gender_concept_id and year_of_birth #> • Removing controls that were not in observation at index date #> • Excluding target records whose pair is not in observation #> • Adjusting ratio #> Binding cohorts #> ✔ Done #> → Sampling cohort `my_cohort` #> Returning entry cohort as the size of the cohorts to be sampled is equal or #> smaller than `n`. #> • Generating an age and sex matched cohort for cohort_2 #> Starting matching #> ℹ Creating copy of target cohort. #> • 1 cohort to be matched. #> ℹ Creating controls cohorts. #> ℹ Excluding cases from controls #> • Matching by gender_concept_id and year_of_birth #> • Removing controls that were not in observation at index date #> • Excluding target records whose pair is not in observation #> • Adjusting ratio #> Binding cohorts #> ✔ Done #> → Getting cohorts and indexes #> → Summarising cohort characteristics #> ℹ adding demographics columns #> ℹ adding tableIntersectCount 1/1 #> window names casted to snake_case: #> • `-365 to -1` -> `365_to_1` #> ℹ summarising data #> ℹ summarising cohort cohort_1 #> ℹ summarising cohort cohort_2 #> ℹ summarising cohort cohort_1_sampled #> ℹ summarising cohort cohort_1_matched #> ℹ summarising cohort cohort_2_sampled #> ℹ summarising cohort cohort_2_matched #> ✔ summariseCharacteristics finished! #> → Calculating age density #> ℹ The following estimates will be computed: #> • age: density #> → Start summary of data, at 2025-07-30 18:55:31.652526 #> ✔ Summary finished, at 2025-07-30 18:55:31.986582 #> → Run large scale characteristics (including source and standard codes) #> ℹ Summarising large scale characteristics  #>  - getting characteristics from table condition_occurrence (1 of 6) #>  - getting characteristics from table visit_occurrence (2 of 6) #>  - getting characteristics from table measurement (3 of 6) #>  - getting characteristics from table procedure_occurrence (4 of 6) #>  - getting characteristics from table observation (5 of 6) #>  - getting characteristics from table drug_exposure (6 of 6) #> Formatting result #> ✔ Summarising large scale characteristics #> → Run large scale characteristics (including only standard codes) #> ℹ Summarising large scale characteristics  #>  - getting characteristics from table condition_occurrence (1 of 6) #>  - getting characteristics from table visit_occurrence (2 of 6) #>  - getting characteristics from table measurement (3 of 6) #>  - getting characteristics from table procedure_occurrence (4 of 6) #>  - getting characteristics from table observation (5 of 6) #>  - getting characteristics from table drug_exposure (6 of 6) #> Formatting result #> ✔ Summarising large scale characteristics #> `matchedSample` casted to character. #>  #> • Creating denominator for incidence and prevalence #> • Sampling person table to 1e+06 #> ℹ Creating denominator cohorts #> ✔ Cohorts created in 0 min and 5 sec #> • Estimating incidence #> ℹ Getting incidence for analysis 1 of 14 #> ℹ Getting incidence for analysis 2 of 14 #> ℹ Getting incidence for analysis 3 of 14 #> ℹ Getting incidence for analysis 4 of 14 #> ℹ Getting incidence for analysis 5 of 14 #> ℹ Getting incidence for analysis 6 of 14 #> ℹ Getting incidence for analysis 7 of 14 #> ℹ Getting incidence for analysis 8 of 14 #> ℹ Getting incidence for analysis 9 of 14 #> ℹ Getting incidence for analysis 10 of 14 #> ℹ Getting incidence for analysis 11 of 14 #> ℹ Getting incidence for analysis 12 of 14 #> ℹ Getting incidence for analysis 13 of 14 #> ℹ Getting incidence for analysis 14 of 14 #> ✔ Overall time taken: 0 mins and 13 secs #> • Estimating prevalence #> ℹ Getting prevalence for analysis 1 of 14 #> ℹ Getting prevalence for analysis 2 of 14 #> ℹ Getting prevalence for analysis 3 of 14 #> ℹ Getting prevalence for analysis 4 of 14 #> ℹ Getting prevalence for analysis 5 of 14 #> ℹ Getting prevalence for analysis 6 of 14 #> ℹ Getting prevalence for analysis 7 of 14 #> ℹ Getting prevalence for analysis 8 of 14 #> ℹ Getting prevalence for analysis 9 of 14 #> ℹ Getting prevalence for analysis 10 of 14 #> ℹ Getting prevalence for analysis 11 of 14 #> ℹ Getting prevalence for analysis 12 of 14 #> ℹ Getting prevalence for analysis 13 of 14 #> ℹ Getting prevalence for analysis 14 of 14 #> ✔ Time taken: 0 mins and 7 secs #> `populationDateStart`, `populationDateEnd`, and `populationSample` casted to #> character. #> `populationDateStart` and `populationDateEnd` eliminated from settings as all #> elements are NA. #>   CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/populationDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Population-level diagnostics — populationDiagnostics","title":"Population-level diagnostics — populationDiagnostics","text":"phenotypeR diagnostics cohort input relation denomination population. Diagnostics include: * Incidence * Prevalence","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/populationDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population-level diagnostics — populationDiagnostics","text":"","code":"populationDiagnostics(   cohort,   populationSample = 1e+06,   populationDateRange = as.Date(c(NA, NA)) )"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/populationDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population-level diagnostics — populationDiagnostics","text":"cohort Cohort table cdm reference populationSample Number people cdm sample. NULL sampling performed. Sample within populationDateRange specified. populationDateRange Two dates. first indicating earliest cohort start date second indicating latest possible cohort end date. NULL first date set missing, earliest observation_start_date observation_period table used former.  NULL second date set missing, latest observation_end_date observation_period table used latter.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/populationDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Population-level diagnostics — populationDiagnostics","text":"summarised result","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/populationDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population-level diagnostics — populationDiagnostics","text":"","code":"# \\donttest{ library(PhenotypeR) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  cdm <- mockPhenotypeR()  dateStart <- cdm$my_cohort |>   summarise(start = min(cohort_start_date, na.rm = TRUE)) |>   pull(\"start\") dateEnd   <- cdm$my_cohort |>   summarise(start = max(cohort_start_date, na.rm = TRUE)) |>   pull(\"start\")  result <- cdm$my_cohort |>   populationDiagnostics(populationDateRange = c(dateStart, dateEnd)) #> • Creating denominator for incidence and prevalence #> • Sampling person table to 1e+06 #> ℹ Creating denominator cohorts #> ✔ Cohorts created in 0 min and 5 sec #> • Estimating incidence #> ℹ Getting incidence for analysis 1 of 14 #> ℹ Getting incidence for analysis 2 of 14 #> ℹ Getting incidence for analysis 3 of 14 #> ℹ Getting incidence for analysis 4 of 14 #> ℹ Getting incidence for analysis 5 of 14 #> ℹ Getting incidence for analysis 6 of 14 #> ℹ Getting incidence for analysis 7 of 14 #> ℹ Getting incidence for analysis 8 of 14 #> ℹ Getting incidence for analysis 9 of 14 #> ℹ Getting incidence for analysis 10 of 14 #> ℹ Getting incidence for analysis 11 of 14 #> ℹ Getting incidence for analysis 12 of 14 #> ℹ Getting incidence for analysis 13 of 14 #> ℹ Getting incidence for analysis 14 of 14 #> ✔ Overall time taken: 0 mins and 13 secs #> • Estimating prevalence #> ℹ Getting prevalence for analysis 1 of 14 #> ℹ Getting prevalence for analysis 2 of 14 #> ℹ Getting prevalence for analysis 3 of 14 #> ℹ Getting prevalence for analysis 4 of 14 #> ℹ Getting prevalence for analysis 5 of 14 #> ℹ Getting prevalence for analysis 6 of 14 #> ℹ Getting prevalence for analysis 7 of 14 #> ℹ Getting prevalence for analysis 8 of 14 #> ℹ Getting prevalence for analysis 9 of 14 #> ℹ Getting prevalence for analysis 10 of 14 #> ℹ Getting prevalence for analysis 11 of 14 #> ℹ Getting prevalence for analysis 12 of 14 #> ℹ Getting prevalence for analysis 13 of 14 #> ℹ Getting prevalence for analysis 14 of 14 #> ✔ Time taken: 0 mins and 7 secs #> `populationDateStart`, `populationDateEnd`, and `populationSample` casted to #> character.  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/populationSampleDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of `populationSample`. — populationSampleDoc","title":"Helper for consistent documentation of `populationSample`. — populationSampleDoc","text":"Helper consistent documentation `populationSample`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/populationSampleDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of `populationSample`. — populationSampleDoc","text":"populationSample Number people cdm sample. NULL sampling performed. Sample within populationDateRange specified. populationDateRange Two dates. first indicating earliest cohort start date second indicating latest possible cohort end date. NULL first date set missing, earliest observation_start_date observation_period table used former.  NULL second date set missing, latest observation_end_date observation_period table used latter.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. CodelistGenerator summariseAchillesCodeUse, summariseCodeUse, summariseCohortCodeUse, summariseOrphanCodes omopgenerics bind, exportSummarisedResult, importSummarisedResult, settings, suppress","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/resultDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of `result`. — resultDoc","title":"Helper for consistent documentation of `result`. — resultDoc","text":"Helper consistent documentation `result`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/resultDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of `result`. — resultDoc","text":"result summarised result","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/shinyDiagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a shiny app summarising your phenotyping results — shinyDiagnostics","title":"Create a shiny app summarising your phenotyping results — shinyDiagnostics","text":"shiny app designed diagnostics results phenotypeR, includes: * diagnostics database via `databaseDiagnostics`. * diagnostics cohort_codelist attribute cohort via `codelistDiagnostics`. * diagnostics cohort via `cohortDiagnostics`. * diagnostics population via `populationDiagnostics`. * diagnostics matched cohort via `matchedDiagnostics`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/shinyDiagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a shiny app summarising your phenotyping results — shinyDiagnostics","text":"","code":"shinyDiagnostics(   result,   directory,   minCellCount = 5,   open = rlang::is_interactive(),   expectations = NULL )"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/shinyDiagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a shiny app summarising your phenotyping results — shinyDiagnostics","text":"result summarised result directory Directory save report minCellCount Minimum cell count suppression exporting results. open TRUE, shiny app launched new session. FALSE, shiny app created launched. expectations Data frame tibble cohort expectations. must contain following columns: cohort_name, estimate, value, source.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/shinyDiagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a shiny app summarising your phenotyping results — shinyDiagnostics","text":"shiny app","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/shinyDiagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a shiny app summarising your phenotyping results — shinyDiagnostics","text":"","code":"# \\donttest{ library(PhenotypeR) library(dplyr)  cdm <- mockPhenotypeR()  result <- phenotypeDiagnostics(cdm$my_cohort) #>  #> Warning: Vocabulary version in cdm_source (NA) doesn't match the one in the vocabulary #> table (mock) #>  #> Warning: ! cohort_codelist attribute for cohort is empty #> ℹ Returning an empty summarised result #> ℹ You can add a codelist to a cohort with `addCodelistAttribute()`. #>  #> • Starting Cohort Diagnostics #> → Getting cohort attrition #> → Getting cohort count #> ℹ summarising data #> ℹ summarising cohort cohort_1 #> ℹ summarising cohort cohort_2 #> ✔ summariseCharacteristics finished! #> → Getting cohort overlap #> → Getting cohort timing #> ℹ The following estimates will be computed: #> • days_between_cohort_entries: median, q25, q75, min, max, density #> ! Table is collected to memory as not all requested estimates are supported on #>   the database side #> → Start summary of data, at 2025-07-30 18:58:47.533656 #> ✔ Summary finished, at 2025-07-30 18:58:47.660743 #> → Creating matching cohorts #> → Sampling cohort `my_cohort` #> Returning entry cohort as the size of the cohorts to be sampled is equal or #> smaller than `n`. #> • Generating an age and sex matched cohort for cohort_1 #> Starting matching #> ℹ Creating copy of target cohort. #> • 1 cohort to be matched. #> ℹ Creating controls cohorts. #> ℹ Excluding cases from controls #> • Matching by gender_concept_id and year_of_birth #> • Removing controls that were not in observation at index date #> • Excluding target records whose pair is not in observation #> • Adjusting ratio #> Binding cohorts #> ✔ Done #> → Sampling cohort `my_cohort` #> Returning entry cohort as the size of the cohorts to be sampled is equal or #> smaller than `n`. #> • Generating an age and sex matched cohort for cohort_2 #> Starting matching #> ℹ Creating copy of target cohort. #> • 1 cohort to be matched. #> ℹ Creating controls cohorts. #> ℹ Excluding cases from controls #> • Matching by gender_concept_id and year_of_birth #> • Removing controls that were not in observation at index date #> • Excluding target records whose pair is not in observation #> • Adjusting ratio #> Binding cohorts #> ✔ Done #> → Getting cohorts and indexes #> → Summarising cohort characteristics #> ℹ adding demographics columns #> ℹ adding tableIntersectCount 1/1 #> window names casted to snake_case: #> • `-365 to -1` -> `365_to_1` #> ℹ summarising data #> ℹ summarising cohort cohort_1 #> ℹ summarising cohort cohort_2 #> ℹ summarising cohort cohort_1_sampled #> ℹ summarising cohort cohort_1_matched #> ℹ summarising cohort cohort_2_sampled #> ℹ summarising cohort cohort_2_matched #> ✔ summariseCharacteristics finished! #> → Calculating age density #> ℹ The following estimates will be computed: #> • age: density #> → Start summary of data, at 2025-07-30 18:59:12.611706 #> ✔ Summary finished, at 2025-07-30 18:59:12.947909 #> → Run large scale characteristics (including source and standard codes) #> ℹ Summarising large scale characteristics  #>  - getting characteristics from table condition_occurrence (1 of 6) #>  - getting characteristics from table visit_occurrence (2 of 6) #>  - getting characteristics from table measurement (3 of 6) #>  - getting characteristics from table procedure_occurrence (4 of 6) #>  - getting characteristics from table observation (5 of 6) #>  - getting characteristics from table drug_exposure (6 of 6) #> Formatting result #> ✔ Summarising large scale characteristics #> → Run large scale characteristics (including only standard codes) #> ℹ Summarising large scale characteristics  #>  - getting characteristics from table condition_occurrence (1 of 6) #>  - getting characteristics from table visit_occurrence (2 of 6) #>  - getting characteristics from table measurement (3 of 6) #>  - getting characteristics from table procedure_occurrence (4 of 6) #>  - getting characteristics from table observation (5 of 6) #>  - getting characteristics from table drug_exposure (6 of 6) #> Formatting result #> ✔ Summarising large scale characteristics #> `matchedSample` casted to character. #>  #> • Creating denominator for incidence and prevalence #> • Sampling person table to 1e+06 #> ℹ Creating denominator cohorts #> ✔ Cohorts created in 0 min and 5 sec #> • Estimating incidence #> ℹ Getting incidence for analysis 1 of 14 #> ℹ Getting incidence for analysis 2 of 14 #> ℹ Getting incidence for analysis 3 of 14 #> ℹ Getting incidence for analysis 4 of 14 #> ℹ Getting incidence for analysis 5 of 14 #> ℹ Getting incidence for analysis 6 of 14 #> ℹ Getting incidence for analysis 7 of 14 #> ℹ Getting incidence for analysis 8 of 14 #> ℹ Getting incidence for analysis 9 of 14 #> ℹ Getting incidence for analysis 10 of 14 #> ℹ Getting incidence for analysis 11 of 14 #> ℹ Getting incidence for analysis 12 of 14 #> ℹ Getting incidence for analysis 13 of 14 #> ℹ Getting incidence for analysis 14 of 14 #> ✔ Overall time taken: 0 mins and 13 secs #> • Estimating prevalence #> ℹ Getting prevalence for analysis 1 of 14 #> ℹ Getting prevalence for analysis 2 of 14 #> ℹ Getting prevalence for analysis 3 of 14 #> ℹ Getting prevalence for analysis 4 of 14 #> ℹ Getting prevalence for analysis 5 of 14 #> ℹ Getting prevalence for analysis 6 of 14 #> ℹ Getting prevalence for analysis 7 of 14 #> ℹ Getting prevalence for analysis 8 of 14 #> ℹ Getting prevalence for analysis 9 of 14 #> ℹ Getting prevalence for analysis 10 of 14 #> ℹ Getting prevalence for analysis 11 of 14 #> ℹ Getting prevalence for analysis 12 of 14 #> ℹ Getting prevalence for analysis 13 of 14 #> ℹ Getting prevalence for analysis 14 of 14 #> ✔ Time taken: 0 mins and 7 secs #> `populationDateStart`, `populationDateEnd`, and `populationSample` casted to #> character. #> `populationDateStart` and `populationDateEnd` eliminated from settings as all #> elements are NA. #>  expectations <- tibble(\"cohort_name\" = rep(c(\"cohort_1\", \"cohort_2\"),3),                        \"value\" = c(rep(c(\"Mean age\"),2),                                    rep(\"Male percentage\",2),                                    rep(\"Survival probability after 5y\",2)),                        \"estimate\" = c(\"32\", \"54\", \"25%\", \"74%\", \"95%\", \"21%\"),                        \"source\" = rep(c(\"AlbertAI\"),6))  shinyDiagnostics(result, tempdir(), expectations = expectations) #> ℹ Creating shiny from provided data #> Warning: codelistDiagnostics not present in the summarised result. Removing tab from the #> shiny app. #> Warning: No survival analysis present in cohortDiagnostics. Removing tab from the shiny #> app. #> Warning: '/tmp/RtmpVpOXaY/PhenotypeRShiny/data/raw/expectations' already exists #> ℹ Shiny app created in /tmp/RtmpVpOXaY/PhenotypeRShiny  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/survivalDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of `survival`. — survivalDoc","title":"Helper for consistent documentation of `survival`. — survivalDoc","text":"Helper consistent documentation `survival`.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/survivalDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of `survival`. — survivalDoc","text":"survival Boolean variable. Whether conduct survival analysis (TRUE) (FALSE).","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/tableCohortExpectations.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table summarising cohort expectations — tableCohortExpectations","title":"Create a table summarising cohort expectations — tableCohortExpectations","text":"Create table summarising cohort expectations","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/tableCohortExpectations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table summarising cohort expectations — tableCohortExpectations","text":"","code":"tableCohortExpectations(expectations, type = \"reactable\")"},{"path":"https://ohdsi.github.io/PhenotypeR/reference/tableCohortExpectations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table summarising cohort expectations — tableCohortExpectations","text":"expectations Data frame tibble cohort expectations. must contain following columns: cohort_name, estimate, value, source. type Table type view results. See visOmopResults::tableType() supported tables.","code":""},{"path":"https://ohdsi.github.io/PhenotypeR/reference/tableCohortExpectations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table summarising cohort expectations — tableCohortExpectations","text":"Summary cohort expectations","code":""}]
